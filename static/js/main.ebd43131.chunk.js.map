{"version":3,"sources":["assets/drumSequencer.svg","assets/drum pad.svg","assets/Shaker.wav","assets/Kick.wav","assets/HiHat.wav","assets/Tom.wav","assets/SnareSound.wav","assets/808hconga.wav","assets/Crash.wav","assets/Clap02.wav","App.js","serviceWorker.js","components/drumpad.js","index.js"],"names":["module","exports","__webpack_require__","p","library","add","fab","faPlay","App","react_default","a","createElement","className","react_router_dom","to","src","drumpad","alt","DrumSequencer","Boolean","window","location","hostname","match","DrumPad1","_ref","drumKey","song","handleClick","url","id","onClick","DrumPad2","_ref2","DrumMachine","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","drumPads1","key","ShakerSound","KickSound","HiHatSound","TomSound","drumPads2","SnareSound","WOW","ClapSound","CrashSound","currentSongText","handleButtonClick","bind","assertThisInitialized","handleKeyPress","handlekeyPress","addEventListener","_this2","document","getElementById","play","setState","_this3","map","item","drumpad_DrumPad1","drumpad_DrumPad2","e","pad1","find","toUpperCase","click","pad2","React","Component","ReactDOM","render","Fragment","react_router","exact","path","component","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ebd43131.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/drumSequencer.59d2a27c.svg\";","module.exports = __webpack_public_path__ + \"static/media/drum pad.d43507e1.svg\";","module.exports = __webpack_public_path__ + \"static/media/Shaker.3111c849.wav\";","module.exports = __webpack_public_path__ + \"static/media/Kick.d3369824.wav\";","module.exports = __webpack_public_path__ + \"static/media/HiHat.b91b64ff.wav\";","module.exports = __webpack_public_path__ + \"static/media/Tom.6399c42c.wav\";","module.exports = __webpack_public_path__ + \"static/media/SnareSound.a3af7ccf.wav\";","module.exports = __webpack_public_path__ + \"static/media/808hconga.8d08371f.wav\";","module.exports = __webpack_public_path__ + \"static/media/Crash.fb090900.wav\";","module.exports = __webpack_public_path__ + \"static/media/Clap02.f2910c32.wav\";","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faPlay } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DrumSequencer from \"../src/assets/drumSequencer.svg\";\r\nimport drumpad from \"../src/assets/drum pad.svg\"\r\n\r\nlibrary.add(fab, faPlay);\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"body\">\r\n      <div>\r\n        <h1 className=\"title\">beatmaker</h1>\r\n      </div>\r\n      <div className=\"menu\">\r\n        <div className=\"DrumpadLink\">\r\n          <Link to=\"/beatmaker\">\r\n            <img className=\"drumpad\" src={drumpad} alt=\"logo\" />\r\n            drumpad\r\n          </Link>\r\n        </div>\r\n        <div className=\"DrumSequencerLink\">\r\n          \r\n            <img className=\"DrumSequencer\" src={DrumSequencer} alt=\"logo\" />\r\n            drumsequencer\r\n          \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from\"react\"\r\nimport ShakerSound from '../assets/Shaker.wav'\r\nimport KickSound from '../assets/Kick.wav'\r\nimport HiHatSound from '../assets/HiHat.wav'\r\nimport TomSound from '../assets/Tom.wav'\r\nimport SnareSound from '../assets/SnareSound.wav'\r\nimport WOW from '../assets/808hconga.wav'\r\nimport CrashSound from '../assets/Crash.wav'\r\nimport ClapSound from'../assets/Clap02.wav'\r\nimport \"./pages/drumpad.css\"\r\n\r\nconst DrumPad1 = ({ drumKey, song,handleClick,url }) => {\r\n    return (\r\n        <button className=\"drum-pad\" id={song} onClick={handleClick(drumKey,song)}>\r\n            {song}<br/>\r\n            {drumKey}\r\n            <audio className=\"clip\" src={url} id={drumKey}/>\r\n        </button>\r\n    );\r\n};\r\nconst DrumPad2 = ({ drumKey, song,handleClick,url }) => {\r\n    return (\r\n        <button className=\"drum-pad\" id={song} onClick={handleClick(drumKey,song)}>\r\n            {song}<br/>\r\n            {drumKey}\r\n            <audio className=\"clip\" src={url} id={drumKey}/>\r\n        </button>\r\n    );\r\n};\r\n\r\nclass DrumMachine extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            drumPads1: [\r\n                {\r\n                    \"key\": \"Q\",\r\n                    \"song\": \"shaker\",\r\n                    \"url\": ShakerSound\r\n                },\r\n                {\r\n                    \"key\": \"W\",\r\n                    \"song\": \"Kick\",\r\n                    \"url\": KickSound\r\n                },\r\n                {\r\n                    \"key\": \"E\",\r\n                    \"song\": \"Hi-Hat\",\r\n                    \"url\": HiHatSound\r\n                },\r\n                {\r\n                    \"key\": \"R\",\r\n                    \"song\": \"Tom\",\r\n                    \"url\": TomSound\r\n                }]\r\n            ,drumPads2:[\r\n                {\r\n                    \"key\": \"A\",\r\n                    \"song\": \"Snare\",\r\n                    \"url\": SnareSound\r\n                },\r\n                {\r\n                    \"key\": \"S\",\r\n                    \"song\": \"808\",\r\n                    \"url\": WOW\r\n                },\r\n                {\r\n                    \"key\": \"D\",\r\n                    \"song\": \"Clap\",\r\n                    \"url\": ClapSound\r\n                },\r\n                {\r\n                    \"key\": \"F\",\r\n                    \"song\": \"Crash\",\r\n                    \"url\": CrashSound\r\n                }\r\n                \r\n            ],\r\n           \r\n            currentSongText: '',\r\n        };\r\n        this.handleButtonClick = this.handleButtonClick.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.handlekeyPress = this.handlekeyPress.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        // will click the button when the corresponding key pressed\r\n        window.addEventListener('keypress', this.handleKeyPress);\r\n        window.addEventListener('keypress', this.handlekeyPress);\r\n    }\r\n    // handler for the click button on the DrumPad Component\r\n    handleButtonClick(key, song) {\r\n        return () => {\r\n            document.getElementById(key).play();\r\n            this.setState({\r\n                currentSongText: song,\r\n            });\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"drum-machine\">\r\n                <div className=\"app_title\">\r\n                    <h1>Drum Pad</h1>\r\n                </div>\r\n                <div className=\"display-container\">\r\n                    <div id=\"display-pads\">\r\n                        {this.state.drumPads1.map(item => (\r\n                            <DrumPad1\r\n                                song={item.song}\r\n                                key={item.key}\r\n                                drumKey={item.key}\r\n                                handleClick={this.handleButtonClick}\r\n                                url={item.url}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                    <div id=\"display-pads\">\r\n                        {this.state.drumPads2.map(item => (\r\n                            <DrumPad2\r\n                                song={item.song}\r\n                                key={item.key}\r\n                                drumKey={item.key}\r\n                                handleClick={this.handleButtonClick}\r\n                                url={item.url}\r\n                            />\r\n                        ))}\r\n\r\n                    </div>\r\n                    <p id=\"display\" className=\"current-text\">{this.state.currentSongText}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    //\r\n\r\n    handleKeyPress(e) {\r\n        const pad1 = this.state.drumPads1.find(\r\n            item => item.key === e.key.toUpperCase(),\r\n        );\r\n        \r\n        // click the button\r\n        if (pad1) document.getElementById(pad1.song).click();\r\n    }\r\n    handlekeyPress(e){\r\n        const pad2 = this.state.drumPads2.find(\r\n            item => item.key === e.key.toUpperCase(),\r\n        );\r\n        if (pad2) document.getElementById(pad2.song).click();\r\n    }\r\n}\r\n\r\nexport default DrumMachine\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport DrumMachine from \"./components/drumpad\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <React.Fragment>\r\n      <Route exact path=\"/\" component={App} />\r\n      <Route exact path=\"/beatmaker\" component={DrumMachine} />\r\n      \r\n    </React.Fragment>\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}